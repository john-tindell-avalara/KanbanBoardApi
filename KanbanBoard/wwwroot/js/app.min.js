var KanbanBoardApp;
(function (KanbanBoardApp) {
    var AddBoardController = (function () {
        function AddBoardController(scope, http, modalInstance) {
            var _this = this;
            this.scope = scope;
            this.http = http;
            this.modalInstance = modalInstance;
            scope.save = function () {
                if (_this.scope.boardForm.$valid) {
                    var board = {
                        Name: _this.scope.boardForm.name.$viewValue
                    };
                    _this.http.post(KanbanBoardApp.Settings.ApiLocation + "/boards", board).success(function (response) {
                        _this.scope.$emit('BoardCreated', response);
                        modalInstance.dismiss(null);
                    }).error(function (error, status) {
                        scope.errorMessage = "Unknown error has occured";
                        _this.scope.boardForm.name.$invalid = true;
                    });
                }
            };
            scope.cancel = function () {
                modalInstance.dismiss('cancel');
            };
        }
        return AddBoardController;
    })();
    KanbanBoardApp.AddBoardController = AddBoardController;
})(KanbanBoardApp || (KanbanBoardApp = {}));

var KanbanBoardApp;
(function (KanbanBoardApp) {
    var AddColumnController = (function () {
        function AddColumnController(scope, http, modalInstance, currentBoard) {
            var _this = this;
            this.scope = scope;
            this.http = http;
            this.modalInstance = modalInstance;
            this.currentBoard = currentBoard;
            scope.save = function () {
                if (_this.scope.columnForm.$valid) {
                    var column = { Name: _this.scope.columnForm.name.$viewValue };
                    _this.http.post(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.currentBoard.Slug + "/columns", column).success(function (response) {
                        _this.scope.$emit('newColumnCreated', response);
                        modalInstance.dismiss(null);
                    }).error(function (error, status) {
                        if (status === 409) {
                            scope.errorMessage = "Column with this name already exists";
                        }
                        else {
                            scope.errorMessage = "Unknown error has occured";
                        }
                        _this.scope.columnForm.name.$invalid = true;
                    });
                }
            };
            scope.cancel = function () {
                modalInstance.dismiss('cancel');
            };
        }
        return AddColumnController;
    })();
    KanbanBoardApp.AddColumnController = AddColumnController;
})(KanbanBoardApp || (KanbanBoardApp = {}));

var KanbanBoardApp;
(function (KanbanBoardApp) {
    var AddTaskController = (function () {
        function AddTaskController(scope, http, modalInstance, currentBoard, columnSlug) {
            var _this = this;
            this.scope = scope;
            this.http = http;
            this.modalInstance = modalInstance;
            this.currentBoard = currentBoard;
            this.columnSlug = columnSlug;
            scope.save = function () {
                if (_this.scope.addTaskForm.$valid) {
                    var task = {
                        Name: _this.scope.addTaskForm.name.$viewValue,
                        Description: _this.scope.addTaskForm.description.$viewValue,
                        BoardColumnSlug: _this.columnSlug
                    };
                    _this.http.post(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.currentBoard.Slug + "/tasks", task).success(function (response) {
                        _this.scope.$emit('newTaskCreated', response);
                        modalInstance.dismiss(null);
                    }).error(function (error, status) {
                        scope.errorMessage = "Unknown error has occured";
                        _this.scope.addTaskForm.name.$invalid = true;
                    });
                }
            };
            scope.cancel = function () {
                modalInstance.dismiss('cancel');
            };
        }
        return AddTaskController;
    })();
    KanbanBoardApp.AddTaskController = AddTaskController;
})(KanbanBoardApp || (KanbanBoardApp = {}));

var KanbanBoardApp;
(function (KanbanBoardApp) {
    var BoardController = (function () {
        function BoardController(scope, http, modal) {
            var _this = this;
            this.scope = scope;
            this.http = http;
            this.modal = modal;
            this.scope.loading = true;
            http.get(KanbanBoardApp.Settings.ApiLocation + "/boards").success(function (response) {
                _this.scope.loading = false;
                _this.scope.boards = response.Items;
                _this.scope.loadBoard(_this.scope.boards[0]);
            });
            scope.$on('BoardCreated', function (event, args) {
                _this.scope.boards.push(args);
            });
            scope.$on('newColumnCreated', function (event, args) {
                _this.scope.columns.push(args);
            });
            scope.$on('newTaskCreated', function (event, args) {
                _this.scope.tasks.push(args);
            });
            scope.$on('TaskUpdated', function (event, args) {
                for (var i in _this.scope.tasks) {
                    if (_this.scope.tasks[i].Id === args.Id) {
                        _this.scope.tasks[i] = args;
                        break;
                    }
                }
            });
            scope.$on('ColumnUpdated', function (event, args) {
                for (var i in _this.scope.columns) {
                    if (_this.scope.columns[i].Id === args.Id) {
                        _this.scope.columns[i] = args;
                        break;
                    }
                }
            });
            scope.loadBoard = function (item) {
                _this.scope.currentBoard = item;
                _this.http.get(KanbanBoardApp.Settings.ApiLocation + "/boards/" + item.Slug + "/columns").success(function (response) {
                    _this.scope.columns = response.Items;
                });
                _this.http.get(KanbanBoardApp.Settings.ApiLocation + "/boards/" + item.Slug + "/tasks").success(function (response) {
                    _this.scope.tasks = response.Items;
                });
            };
            scope.createBoard = function () {
                modal.open({
                    animation: true,
                    templateUrl: 'AddBoardModal.html',
                    controller: 'AddBoardController',
                    scope: _this.scope
                });
            };
            scope.createTask = function (columnSlug) {
                modal.open({
                    animation: true,
                    templateUrl: 'AddTaskModal.html',
                    controller: 'AddTaskController',
                    scope: _this.scope,
                    resolve: {
                        currentBoard: function () {
                            return _this.scope.currentBoard;
                        },
                        columnSlug: function () {
                            return columnSlug;
                        }
                    }
                });
            };
            scope.deleteTask = function (task) {
                _this.http.delete(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.scope.currentBoard.Slug + "/tasks/" + task.Id).success(function (response) {
                    var index = _this.scope.tasks.indexOf(task);
                    if (index > -1) {
                        _this.scope.tasks.splice(index, 1);
                    }
                });
            };
            scope.editTask = function (task) {
                var newTask = angular.copy(task);
                modal.open({
                    animation: true,
                    templateUrl: 'UpdateTaskModal.html',
                    controller: 'UpdateTaskController',
                    scope: _this.scope,
                    resolve: {
                        currentBoard: function () {
                            return _this.scope.currentBoard;
                        },
                        columns: function () {
                            return _this.scope.columns;
                        },
                        currentTask: function () {
                            return newTask;
                        }
                    }
                });
            };
            scope.updateTask = function (task) {
                _this.http.put(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.scope.currentBoard.Slug + "/tasks/" + task.Id, task).success(function (response) {
                    // do something
                });
            };
            scope.createColumn = function () {
                modal.open({
                    animation: true,
                    templateUrl: 'AddColumnModal.html',
                    controller: 'AddColumnController',
                    scope: _this.scope,
                    resolve: {
                        currentBoard: function () {
                            return _this.scope.currentBoard;
                        }
                    }
                });
            };
            scope.editColumn = function (column) {
                var newColumn = angular.copy(column);
                modal.open({
                    animation: true,
                    templateUrl: 'UpdateColumnModal.html',
                    controller: 'UpdateColumnController',
                    scope: _this.scope,
                    resolve: {
                        currentBoard: function () {
                            return _this.scope.currentBoard;
                        },
                        currentColumn: function () {
                            return newColumn;
                        }
                    }
                });
            };
            scope.deleteColumn = function (column) {
                _this.http.delete(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.scope.currentBoard.Slug + "/columns/" + column.Slug).success(function (response) {
                    var index = _this.scope.columns.indexOf(column);
                    if (index > -1) {
                        _this.scope.columns.splice(index, 1);
                    }
                });
            };
            scope.onDragComplete = function (data, event, columnSlug) {
                data.BoardColumnSlug = columnSlug;
                _this.http.put(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.scope.currentBoard.Slug + "/tasks/" + data.Id, data).success(function (response) {
                    // do something
                });
            };
        }
        return BoardController;
    })();
    KanbanBoardApp.BoardController = BoardController;
})(KanbanBoardApp || (KanbanBoardApp = {}));








var KanbanBoardApp;
(function (KanbanBoardApp) {
    var app = angular.module('KanbanBoardApp', ['ngDraggable', 'ui.bootstrap']);
    app.controller("BoardController", ['$scope', '$http', '$modal', KanbanBoardApp.BoardController]);
    app.controller("AddBoardController", ['$scope', '$http', '$modalInstance', KanbanBoardApp.AddBoardController]);
    app.controller("AddColumnController", ['$scope', '$http', '$modalInstance', 'currentBoard', KanbanBoardApp.AddColumnController]);
    app.controller("UpdateColumnController", ['$scope', '$http', '$modalInstance', 'currentBoard', 'currentColumn', KanbanBoardApp.UpdateColumnController]);
    app.controller("AddTaskController", ['$scope', '$http', '$modalInstance', 'currentBoard', 'columnSlug', KanbanBoardApp.AddTaskController]);
    app.controller("UpdateTaskController", ['$scope', '$http', '$modalInstance', 'currentBoard', 'columns', 'currentTask', KanbanBoardApp.UpdateTaskController]);
})(KanbanBoardApp || (KanbanBoardApp = {}));

var KanbanBoardApp;
(function (KanbanBoardApp) {
    var UpdateColumnController = (function () {
        function UpdateColumnController(scope, http, modalInstance, currentBoard, currentColumn) {
            var _this = this;
            this.scope = scope;
            this.http = http;
            this.modalInstance = modalInstance;
            this.currentBoard = currentBoard;
            this.currentColumn = currentColumn;
            scope.currentColumn = currentColumn;
            scope.save = function () {
                if (_this.scope.updateColumnForm.$valid) {
                    currentColumn.Name = _this.scope.updateColumnForm.name.$viewValue;
                    _this.http.put(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.currentBoard.Slug + "/columns/" + currentColumn.Slug, currentColumn).success(function (response) {
                        _this.scope.$emit('ColumnUpdated', response);
                        modalInstance.dismiss(null);
                    }).error(function (error, status) {
                        scope.errorMessage = "Unknown error has occured";
                        _this.scope.updateColumnForm.name.$invalid = true;
                    });
                }
            };
            scope.cancel = function () {
                modalInstance.dismiss('cancel');
            };
        }
        return UpdateColumnController;
    })();
    KanbanBoardApp.UpdateColumnController = UpdateColumnController;
})(KanbanBoardApp || (KanbanBoardApp = {}));

var KanbanBoardApp;
(function (KanbanBoardApp) {
    var UpdateTaskController = (function () {
        function UpdateTaskController(scope, http, modalInstance, currentBoard, columns, currentTask) {
            var _this = this;
            this.scope = scope;
            this.http = http;
            this.modalInstance = modalInstance;
            this.currentBoard = currentBoard;
            this.columns = columns;
            this.currentTask = currentTask;
            this.scope.currentTask = currentTask;
            this.scope.columns = columns;
            scope.save = function () {
                if (_this.scope.updateTaskForm.$valid) {
                    _this.currentTask.Name = _this.scope.updateTaskForm.name.$viewValue;
                    _this.currentTask.Description = _this.scope.updateTaskForm.description.$viewValue;
                    console.log(_this.scope.updateTaskForm.columnSlug);
                    _this.currentTask.BoardColumnSlug = _this.scope.updateTaskForm.columnSlug.$viewValue;
                    _this.http.put(KanbanBoardApp.Settings.ApiLocation + "/boards/" + _this.currentBoard.Slug + "/tasks/" + _this.currentTask.Id, _this.currentTask).success(function (response) {
                        _this.scope.$emit('TaskUpdated', response);
                        modalInstance.dismiss(null);
                    }).error(function (error, status) {
                        scope.errorMessage = "Unknown error has occured";
                        _this.scope.updateTaskForm.name.$invalid = true;
                    });
                }
            };
            scope.cancel = function () {
                modalInstance.dismiss('cancel');
            };
        }
        return UpdateTaskController;
    })();
    KanbanBoardApp.UpdateTaskController = UpdateTaskController;
})(KanbanBoardApp || (KanbanBoardApp = {}));

var KanbanBoardApp;
(function (KanbanBoardApp) {
    var Settings = (function () {
        function Settings() {
        }
        //public static ApiLocation = "https://yeticode-kanbanboardapi.azurewebsites.net";
        Settings.ApiLocation = "http://localhost:2943/";
        return Settings;
    })();
    KanbanBoardApp.Settings = Settings;
    var app = angular.module('KanbanBoardApp', ['ngRoute', 'ngDraggable', 'ui.bootstrap', 'AdalAngular']);
    app.config(['$routeProvider', '$httpProvider', 'adalAuthenticationServiceProvider', function ($routeProvider, $httpProvider, adalProvider) {
            $routeProvider.when('/', {
                controller: 'BoardController',
                templateUrl: '/App/Views/Board.html',
                requireADLogin: true
            });
            //$httpProvider.defaults.useXDomain = true;
            //$httpProvider.defaults.headers.common = 'Content-Type: application/json';
            //delete $httpProvider.defaults.headers.common['X-Requested-With'];
            adalProvider.init({
                //instance: 'http://localhost:56134/',
                //tenant: false,
                tenant: 'johnyeticodeco.onmicrosoft.com',
                clientId: '1349a492-7dd3-4105-9605-059e12770f9f',
                extraQueryParameter: 'nux=1'
            }, $httpProvider);
        }]);
    app.controller("BoardController", ['$scope', '$http', '$modal', KanbanBoardApp.BoardController]);
    app.controller("AddBoardController", ['$scope', '$http', '$modalInstance', KanbanBoardApp.AddBoardController]);
    app.controller("AddColumnController", ['$scope', '$http', '$modalInstance', 'currentBoard', KanbanBoardApp.AddColumnController]);
    app.controller("AddTaskController", ['$scope', '$http', '$modalInstance', 'currentBoard', 'columnSlug', KanbanBoardApp.AddTaskController]);
    app.controller("UpdateTaskController", ['$scope', '$http', '$modalInstance', 'currentBoard', 'columns', 'currentTask', KanbanBoardApp.UpdateTaskController]);
})(KanbanBoardApp || (KanbanBoardApp = {}));
